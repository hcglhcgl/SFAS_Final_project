#!/usr/bin/env python
import numpy as np
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import QR_Frame_calc as QR
import rospy
import random_driving as rd
import tf
from tf.listener import TransformListener
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped, Twist
#----------------------VARIABLES---------------------------
global QR_coordinates = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
global finalWord_list = ["0", "0", "0", "0", "0"]
# ---------------------MOVEMENTS---------------------------
def goto_observe_position(observe_position):
    goal_position = goal_pose(observe_position)
    client.send_goal(goal_position)
    client.wait_for_result()
    rospy.sleep(2)
    print ("arrived!")


def goal_pose(pose):
    if pose == []:
        goal_pose = []
        return goal_pose
    goal_pose = MoveBaseGoal()
    goal_pose.target_pose.header.frame_id = 'map'
    goal_pose.target_pose.pose.position.x = pose[0][0]
    goal_pose.target_pose.pose.position.y = pose[0][1]
    goal_pose.target_pose.pose.position.z = pose[0][2]
    goal_pose.target_pose.pose.orientation.x = pose[1][0]
    goal_pose.target_pose.pose.orientation.y = pose[1][1]
    goal_pose.target_pose.pose.orientation.z = pose[1][2]
    goal_pose.target_pose.pose.orientation.w = pose[1][3]
    return goal_pose
#------------------------CALLBACKS-----------------
def object_position_callback(message):
    global object_camera_position
    object_camera_position = [message.pose.position.x, message.pose.position.y, message.pose.position.z, 1]
    br.sendTransform((message.pose.position.x, message.pose.position.y, message.pose.position.z),
                     (message.pose.orientation.x, message.pose.orientation.y, message.pose.orientation.z, message.pose.orientation.w),
                     rospy.Time.now(),
                     "qr_code",
                     "camera_optical_link")
def getQR(data):
    global N_old
    if "0" in finalWord_list:
        if data.data:
            x = float(data.data.split("\r\n")[0].split("=")[1])
            y = float(data.data.split("\r\n")[1].split("=")[1])
            x_next = float(data.data.split("\r\n")[2].split("=")[1])
            y_next = float(data.data.split("\r\n")[3].split("=")[1])
            N = int(data.data.split("\r\n")[4].split("=")[1])
            L = data.data.split("\r\n")[5].split("=")[1]

            finalWord_list[N-1] = L
            
            # -- Debugging -- Print out QR-code every time a new code is scanned
            if N_old is not N:
                N_old = N
                print x, y, x_next, y_next, N, L, finalWord_list
    else:
        finalWord_str = ''.join(finalWord_list)
        print "Done with exploring"
        print "Final word: " + finalWord_str
        rospy.signal_shutdown("reason")


#-------------------MAIN------------------------
if __name__ == '__main__':
    rospy.init_node('QR_finder')
    rate = rospy.Rate(60)
    print ("Starting script")
    
    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    client.wait_for_server()

    br = tf.TransformBroadcaster()
    listener = TransformListener()

    Cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
    rospy.Subscriber("visp_auto_tracker/code_message", String, getQR, queue_size=10)
    rospy.Subscriber("visp_auto_tracker/object_position", PoseStamped, object_position_callback, queue_size=10)
    
    ##Initial random driving:
    print ("Random Driving mode")
    rd.random_driving()
